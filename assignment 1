#include <iostream>
#include "math.h"
#include <string>
using namespace std;

string decimalToTwoComplimentString(int a,int length)
{
    string binary;
    if(a>=0)
    {
        for(int n=length-1;n>=0;n--)
        {
            char b= static_cast<int>(a/pow(2,n))%2==0? 48:49;
            binary=binary+b;
        }
    }
    if(a<0)
    {
        a=-a;
        for(int n=length-1;n>=0;n--)
        {
            char b= static_cast<int>(a/pow(2,n))%2==0? 49:48;
            binary=binary+b;
        }
        for(int i=length-1;i>=0;i--)
        {
            if(binary[i]=='1')
                binary[i]='0';
            else
            {
                binary[i]='1';
                break;
            }
        }
    }
    return binary;
}

string TwoComplementStringAddition(string a,string b)
{
    const int length=a.length();
    string s[length];
    int count=0;
    for(int n=length-1;n>=0;n--)
    {
        if(a[n]=='0'&&b[n]=='0')
        {
            if(count==0)
                s[n]='0';
            else if(count==1)
            {
                s[n]='1';
                count=0;
            }
        }
        else if(a[n]=='1'&&b[n]=='1')
        {
            if(count==0)
            {
                s[n]='0';
                count++;
            }
            else if(count==1)
            {
                s[n]='1';
                count=0;
                count++;
            }
        }
        else if((a[n]=='1'&&b[n]=='0')||(a[n]=='0'&&b[n]=='1'))
        {
            if(count==0)
                s[n]='1';
            else if(count==1)
            {
                s[n]='0';
                count=0;
                count++;
            }
        }
        
    }
    string add;
    for(int j=0;j<length;j++)
        add=add+s[j];
    return add;
}

int TwoComplementStringToDecimal(string c)
{
    int s=0;
    int length=c.length();
    if(c[0]=='0')
        for(int j=0;j<length;j++)
            s=s+(c[j]-48)*pow(2,length-1-j);
    
    if(c[0]=='1')
    {
        for(int i=0;i<length;i++)            //flip 0 and 1
            c[i]= c[i]=='0'? '1':'0';
        
        if(c[length-1]=='0')            // add 1
            c[length-1]='1';
        else
        {
            for(int n=length-1;n>=0;n--)
            {
                if(c[n]=='1')
                    c[n]='0';
                else if(c[n]=='0')
                {
                    c[n]='1';
                    break;
                }
            }
        }
        for(int w=0;w<length;w++)
            s=s+(c[w]-48)*pow(2,length-1-w);
        s=-s;
    }
    return s;
}

int main()
{
    //Read in the bit pattern size
    int L;
    cout << "Enter bit pattern size ";
    cin >> L;
    //Read in two integers a and b
    int a, b;
    cout << "Enter an integer a ";
    cin >> a;
    cout << "Enter an integer b ";
    cin >> b;
    //Calculate the decimal sum of a and b and print the result
    int c1 = a + b;
    cout << "In decimal " << a << " + " << b << " is " << c1 << endl;
    //Compute the two's complement representations of a and b
    //Each integer must be represented in L-bits pattern
    //Also the two's complements must be returned as string data types
    string A = decimalToTwoComplimentString(a, L);
    string B = decimalToTwoComplimentString(b, L);
    //Print the two's complement representations of a and b
    cout << "The two's complement of " << a << " is \t" << A << endl;
    cout << "The two's complement of " << b << " is \t" << B << endl;
    //Compute the binary sum of the two's complements of a and b
    //The result must be returned as L-bit pattern string data type
    string C = TwoComplementStringAddition(A, B);
    //Print the two's complement sum binary
    cout << "The binary sum of " << A << " and " << B << " is " << C << endl;
    //Convert the two's complement sum to decimal and print
    int c2 = TwoComplementStringToDecimal(C);
    cout << "In two's complement arithmetic, " << a << " + " << b << " is " << c2 << endl;
    //Print some concluding results
    if (c1 == c2)
        cout << c1 << " is equal to " << c2 << ". Good Job!" << endl;
    else
    {
        cout << c1 << " is not equal to " << c2 << endl;
        cout << "Either " << c1 << " cannot be represented by the given bit pattern OR we have made some mistake!" << endl;
    }
    system("Pause");
    return 0;
}
